#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

//Nodos estan numerados de 0 a n-1
vector<int> nodos;

//Inicializar la estructura de datos

void inicio(int n)
{
  nodos.resize(n);
  
  for(int i=0; i<n; i++)
  {
    nodos[i]=i;
  }
}

int find_set(int v)
{
  if(v==nodos[v])
    return v;
    
  return nodos[v]=find_set(nodos[v]);
}

void union_sets(int a, int b)
{
  a=find_set(a);
  b=find_set(b);
  nodos[b]=a;
}

//Lista de aristas
vector<pair<int, pair<int, int>>> list_edges;
//{c,{a,b}}
//O(ElogE + V)

int kruskal(int n, int m)
{
  sort(list_edges.begin(), list_edges.end());
  inicio(n);
  
  int x=n;
  int position_initial=0;
  int aux=0;
  
  while(x!=1 and position_initial<m)
  {
    pair<int, pair<int,int>> arr =list_edges[position_initial];
    
    if(find_set(arr.second.first) != find_set(arr.second.second) )
    {
      cout<<arr.second.first<<" - "<<arr.second.second<<endl;
      union_sets(arr.second.first, arr.second.second);
      aux+=arr.first;
      x--;
    }
    position_initial++;
  }
  return aux;
}

//V cantidad de nodos
//E cantidad de aristas

int main()
{
  int n, m; //n es numero de nodos. m es la cantidad de nodos
  cin >> n >> m;
  list_edges.resize(m);
  
  for(int i =0; i<m; i++)
  {
    int a,b,c; //a, nodo origen. b, nodo destino. c, peso arista
    cin>>a>>b>>c;
    list_edges[i]={c, {a,b}};
  }
  
  cout<<kruskal(n,m)<<endl;
  return 0;
}
